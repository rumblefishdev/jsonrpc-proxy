# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: jsonrpc-proxy

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    DIFF_TOLERANCE: '10'
    UPLOAD_SERVICE_CONFIG_ARN: "arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-upload_service_config"
    NGINX_CONFIG_BUCKET_NAME: ${self:service}-${opt:stage, self:provider.stage}

  stage: dev
  profile: the0cean
  region: us-east-1
  logRetentionInDays: 7
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

    - Effect: Allow
      Action:
        - cloudwatch:PutMetricData
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: "arn:aws:s3:::${self:provider.environment.NGINX_CONFIG_BUCKET_NAME}/*"
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "${self:provider.environment.UPLOAD_SERVICE_CONFIG_ARN}"

plugins:
  - serverless-python-requirements
  - serverless-dynamodb-local
  - serverless-pseudo-parameters

custom:
  pythonRequirements:
    dockerizePip: non-linux
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: false

# you can add packaging information here
package:
  include:
    - handlers/**
  exclude:
    - node_modules/**
    - package.json
    - package-lock.json
    - test/**

functions:
  add_backend:
    handler: handlers.backends.add_backend
    events:
      - http:
          path: backends
          method: post
  list_backends:
    handler: handlers.backends.list_backends
    events:
      - http:
          path: backends
          method: get

  get_block_numbers:
    handler: handlers.eth_nodes.get_block_numbers
    events:
      - schedule: rate(1 minute)
    vpc:
      securityGroupIds: ${file(./config.${self:provider.stage}.yml):rpcSecurityGroupIds}
      subnetIds: ${file(./config.${self:provider.stage}.yml):rpcSubnetIds}

  upload_service_config:
    handler: handlers.service.upload_service_config



resources:
  Resources:
    DynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: url
            AttributeType: S
        KeySchema:
          -
            AttributeName: url
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    NginxConfigBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:provider.environment.NGINX_CONFIG_BUCKET_NAME}
